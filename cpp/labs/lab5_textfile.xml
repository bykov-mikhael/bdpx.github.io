<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="description" content="C++ файлы"/>
<meta name="viewport" content="width=device-width"/>
<link rel="stylesheet" type="text/css" href="/styles.css" />
<title>Лабораторная работа №5</title>
</head>
<body>

<h1>Лабораторная работа №5: Работа с файловыми потоками в С++. Текстовые файлы</h1>

<p>
Цель работы: получить практические навыки решения задач с использованием текстовых файлов на языке С++.
Теоретические сведения
</p>

<h2>Потоковый ввод/вывод дисковых файлов</h2>

<p>Для работы с дисковыми файлами необходимо подключение заголовочного файла &lt;fstream&gt;, содержащего наборы специальных классов:
ifstream    — для ввода,
ofstream    — для вывода,
fstream    — для чтения и записи данных в один и тот же файл.
Чтобы получить возможность работать с дисковым файлом, нужно открыть его с указанием режима доступа, который определяется значением константы open-mode класса ios.
Режим доступа
Стандарт
Действие
app
нет
открывает файл для дозаписи
ate(atend)
да
при открытии файла устанавливает файловый указатель на конец файла
binary(bin)
да
открыть файл в двоичном представлении
in
да
открыть файл для чтения (ввода)
nocreate
нет
если файл не существует, то новый файл не создается


Режим доступа
Стандарт
Действие
noreplace
нет
если файл уже существует, файл не перезаписывается
out
да
открыть файл для записи (вывода)
trunc
нет
Открывает и усекает существующий файл. Новая информация замещает существующую
Текстовые файлы
Создание и запись.
Для создания текстового файла определяют объект класса ofstream и передают конструктору класса имя дискового файла в качестве первого параметра и режим доступа в качестве второго параметра:
ofstream out_file(“Out.txt”, ios::out);
Можно объявить константу, определяющую режим открытия файла, например:
const ios::open_mode=ios::out | ios::app;
После того, как предпринималась попытка открыть файл, следует убедиться в том, что файл открыт и готов для записи (или перезаписи):
if (! out_file)   {  cerr &lt;&lt; ”Error: unable to write to out.txt” &lt;&lt; endl;
    exit(1);
    }
Все сказанное верно и для файлов, открываемых для чтения (или входных файлов):
</p>

<div class="lang-cpp"><![CDATA[
ifstream in_file(“Input.txt”, ios::in);
if (! in_file)   {  cerr << ”Error: unable to open Input.txt” << endl;
    exit(1);
    }
]]></div>

<p>При работе с текстовыми файлами наиболее часто встречаются четыре действия:
посимвольное чтение
посимвольная запись
построчное чтение
построчная запись

Посимвольное чтение текста.
Функция get(), которая является методом istream, применяется для посимвольного чтения текстового файла.
Пример 1.    Посимвольное чтение файла и вывод его на экран.
</p>

<div class="lang-cpp"><![CDATA[
#include <fstream>
#include <iostream>
using namespace std;
int main() {
    char sym;
    ifstream in_file (“Input_file.txt”, ios::in);
    if (! in_file)   {  cerr << ”Error input file” << endl;
    exit(1);
    }
    while (in_file)  {  in_file.get(sym);
    cout << sym;
    }
cout << endl;
return 0;
}
]]></div>

<p>Посимвольная запись текста.
Функция put(), которая является методом ostream, позволяет осуществлять посимвольную запись данных в текстовый файл.
Пример 2.
</p>

<div class="lang-cpp"><![CDATA[
#include <fstream>
#include <iostream>
#include <string>
using namespace std;
int main() {
    string guote = “Зорко одно лишь сердце. Самого главного глазами не увидишь. А. де Сент Экзюпери”;
    ofstream out_file (“Out_file.txt”, ios::out);
    if (! out_file)      {  cerr << ”Error output file” << endl;
    exit(1);
    }
for (int i=0; i<guote.size(); i++)
            out_file.put(guote[i]);
    cout << ”Конец записи” << endl;
}
]]></div>

<p>Построчное чтение файла.
Обычно построчное чтение и запись файлов работают быстрее посимвольных действий.
Для чтения строки из файла воспользуемся функцией getline(), которая является методом класса ifstream.
Функция читает строку (в том числе и разделители), пока не встретит символ новой строки ‘\n’, помещая ее в буфер (первый аргумент функции).
Максимальный размер буфера задается как второй аргумент функции.
Пример 3.
</p>

<div class="lang-cpp"><![CDATA[
# include <fstream>
# include <iostream>
using namespace std;
void main()
{    const int LEN=80;
    char BUF[LEN];
    ifstream in_file (“Input_file.txt”, ios::in);
    if (! in_file)  {  cerr << ”Error input file” << endl;
    exit(1);
    }
    while (in_file)  {  in_file.getline(BUF,LEN);
    cout << BUF << endl;
    }
}
]]></div>

<p>Построчная запись текста.
Пример 4.
</p>

<div class="lang-cpp"><![CDATA[
# include <fstream>
# include <iostream>
# include <string>
using namespace std;
void main()
{    ofstream out_file (“Out_file.txt”, ios::out);
    if (! out_file)  {  cerr << ”Error output file” << endl;
    exit(1);
    }
    out_file << ”Я не знаю, где встретиться\n”;
    out_file << ”Нам придется с тобой,\n”;
    out_file << ”Глобус крутится-вертится,\n”;
    out_file << ”Словно шар голубой\n”;
}
]]></div>

<p>Записываемые строки являются не объектами класса string, а строками типа *char, завершающимися символом ‘\n’.
Признак конца файла
Признак конца файла приходится искать в файлах, открытых для чтения. Этот признак устанавливается в тот момент, когда в файле не осталось больше данных, которые можно считать.
Признак конца файла анализируется в выражении вида
while (! In_file.eof())    { … }
Для этой цели нельзя пользоваться циклом
do { … } while (! In_file.eof()), поскольку файл может оказаться пустым.
Однако проверка на конец файла не анализирует ошибки, которые могут встретиться в процессе чтения файла.
Для проверки как конца файла, так и наличия ошибок при его чтении пользуются условием выхода из цикла:
while (In_file.good())    { … }
Оператор цикла
while (In_file)    { … }
выполняется до тех пор, пока нет ошибок, в том числе и конца файла (EOF).
Имена файлов и аргументы командной строки
В приведенных выше примерах были использованы файлы с фиксированными именами. Однако более удобны программы, в которых имена файлов для чтения или записи можно ввести с клавиатуры или задать в качестве аргументов командной строки.
Пример 5.
</p>

<div class="lang-cpp"><![CDATA[
#include <fstream>
#include <iostream>
#include <stdlib.h>
using namespace std;
int main (int argc, char *argv[]) {
    char I;
    char c;
    if (argc<=1)  {  cout << ”usage: primer.exe filename1 [filename2]”;
    return 1;
    }
    ifstream file;
    for(I=1;I<argc-1;I++) {
        if(!file.open(argv[I])) {
            cout << ”Bad file”;
            return 1;
        };
        cout << ”file “ << argv[I] << endl;
        while(file) {
            c=file.get();
            cout << c;
        }
        file.close();
    }
    return 0;
}
]]></div>

<p>Для работы с файловыми потоками любого из стандартных типов, нужно перегрузить операторы ввода и вывода под требуемый тип данных или воспользоваться шаблоном класса, задаваемым с помощью ключевого слова template.
Пример 6.</p>

<div class="lang-cpp"><![CDATA[
#include <iostream>
using namespace std;
class myclass {
public:
    int x;
    float y;
    friend ostream& operator<<(ostream& out, myclass& m);
    friend istream& operator>>(istream& out, myclass& m);
};

ostream& operator<<(ostream& out, myclass& m) {
  out  <<  m.x  <<  ‘ ‘  <<  m.y  <<  endl;
  return out;
}
istream& operator>>(istream& in, myclass& m) {
  in  >>   m.x  >>   m.y;
  return in;
}
]]></div>

<h2>Контрольные вопросы</h2>
<ol>
<li>Что такое поток?</li>
<li>Что представляет собой файловый указатель?</li>
<li>Перечислить режимы доступа к файлу.</li>
<li>Как открыть и как закрыть файл?</li>
</ol>

<h2>Лабораторное задание</h2>
<p>Для выполнения лабораторной работы необходимо составить ДВЕ программы согласно своему варианту задания.
</p>

<h3>Задание первое</h3>
<p>использовать стандартные потоковые классы для решения задачи</p>

<table>
<caption>Варианты заданий</caption>
<thead>
<tr>
<th>Номер варианта</th>
<th>Задание</th>
</tr>
</thead>
<tbody>
<tr><td>1</td><td>
Дан файл f, компоненты которого являются целыми числами. Записать в файл g, компоненты файла f, исключив повторные вхождения чисел.
</td></tr>
<tr><td>2</td><td>
<p>Дан файл f, компоненты которого являются действительными числами. Найти:</p>
<p>1. наибольшее из значений компонентов f;</p>
<p>2. наименьшее из значений компонентов с четными номерами;</p>
<p>3. наибольшее из значений модулей компонентов с нечетными номерами;</p>
<p>4. сумму наибольшего и наименьшего из значений компонентов файла f;</p>
<p>5. разность первой и последней компоненты файла f.</p>
</td></tr>
<tr><td>3</td><td>
Дан символьный файл f. Подсчитать число вхождений в файл каждой из букв a, b, c, d, e, f.
Результат вывести в файл g в виде таблицы с комментариями.
</td></tr>
<tr><td>4</td><td>
Дан файл f, компоненты которого являются целыми числами. Записать в файл g все четные числа исходного файла, в файл h – все нечетные. Порядок следования чисел сохраняется. Записать в файл g и h комментарии.
</td></tr>
<tr><td>5</td><td>
Дан текстовый файл, содержащий программу на языке С. Проверить эту программу на соответствие числа открывающих и закрывающих фигурных скобок.
</td></tr>
<tr><td>6</td><td>
Дан символьный файл f. Найти и записать в файл g самое длинное слово файла f, снабдив его комментарием.
</td></tr>
<tr><td>7</td><td>
<p>Дан файл f, компоненты которого являются целыми числами. Получить в файле g все компоненты файла f:</p>
<p>1. являющиеся четными числами;</p>
<p>2. делящиеся на 3 и не делящиеся на 7;</p>
<p>3. являющиеся точными квадратами.</p>
<p>Записать в файл g комментарий.</p>
</td></tr>
<tr><td>8</td><td>
Дан файл f. Создать два файла, записав в первый из них все четные числа, расположив их в порядке возрастания, а во второй – все нечетные, расположив их в порядке убывания.
</td></tr>
<tr><td>9</td><td>
Дан текстовый файл f. Переформатировать исходный файл, разделяя его на строки так, чтобы каждая строка содержала столько символов, сколько содержит самая короткая строка исходного файла.
</td></tr>
<tr><td>10</td><td>
Дан файл f. Создать два файла, записав в первый из них среднее геометрическое всех четных чисел, а во второй – среднее арифметическое всех нечетных чисел.
</td></tr>
<tr><td>11</td><td>
Дан числовой файл f. Выбрать все значения, которые делятся нацело на 2 и 4, но не делятся на 6. Записать эти значения в файл g, а все остальные – в файл h.
</td></tr>
<tr><td>12</td><td>
Дан текстовый файл f. Определить, являются ли первые два символа цифрами и если да, то четно ли это число. Записать его в файл g, если оно четно и в h ,если оно нечетно.
</td></tr>
<tr><td>13</td><td>
Дан текстовый файл f. Создать новый файл g и переписать в него исходный файл в обратном порядке, разделив пробелами.
</td></tr>
<tr><td>14</td><td>
Дан текстовый файл f. Создать новый файл, включив в него только те строки исходного файла, которые содержат самый часто используемый символ исходного файла.
</td></tr>
<tr><td>15</td><td>
Дан текстовый файл, содержащий программу на языке С. Проверить эту программу на соответствие открывающих и закрывающих скобок разных типов - (), {}, [].
</td></tr>
</tbody>
</table>

<h3>Задание второе</h3>
<p>реализовать свой класс и перегрузить в нём операторы &lt;&lt; и &gt;&gt; для работы со стандартными потоковыми классами. Использовать этот класс для решения задания вместе со стандартными потоковыми классами
</p>

<table>
<thead>
<tr>
<th>Номер варианта</th>
<th>Задание</th>
</tr>
</thead>
<tbody>
<tr><td>1</td><td>
<p>Сформировать массив на диске, содержащий сведения о пациентах глазной клиники. Класс содержит поля: фамилия пациента, пол, возраст, место проживания (город), диагноз.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран: </p>
<p>- количество иногородних, прибывших в поликлинику;</p>
<p>- список пациентов старше Х лет с диагнозом J.</p>
</td></tr>
<tr><td>2</td><td>
<p>Сформировать массив на диске, содержащий сведения о сотрудниках института. Класс содержит поля: фамилия работающего, название отдела, год рождения, стаж работы, должность, оклад.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран: </p>
<p>- список сотрудников пенсионного возраста на сегодняшний день с указанием стажа работы;</p>
<p>- средний стаж, работающих в отделе Х.</p>
</td></tr>
<tr><td>3</td><td>
<p>Сформировать массив на диске, содержащий сведения об отправлении поездов дальнего следования с жд вокзала. Класс содержит поля: номер поезда, станция назначения, время отправления, время в пути, наличие билетов.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>- время отравления поездов в город Х во временном интервале от А до В часов;</p>
<p>- наличие билетов на поезд с номером ХХХ.</p>
</td></tr>
<tr><td>4</td><td>
<p>Сформировать массив на диске, содержащий сведения о том, какие из пяти предлагаемых дисциплин по выбору желает изучать студент. Класс содержит поля: фамилия студента, индекс группы, пять дисциплин, средний балл успеваемости. Выбираемая дисциплина отмечается символом 1, иначе – пробелом.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран список студентов, желающих прослушать дисциплину X. Если число желающих превышает 4 человека, то отобрать студентов, имеющих более высокий средний балл успеваемости.</p>
</td></tr>
<tr><td>5</td><td>
Сформировать массив на диске, содержащий сведения об игроках футбольной команды. Класс содержит поля: имена нападающих, число заброшенных  ими шайб, число сделанных голевых передач, заработанное штрафное время.
Написать программу, которая выбирает необходимую информацию с диска и выводит на экран четырех лучших игроков по сумме очков (голы + передачи).
</td></tr>
<tr><td>6</td><td>
<p>Сформировать массивна диске, содержащий сведения об ассортименте обуви в магазине фирмы. Класс содержит поля: артикул, наименование, количество, стоимость одной пары. Артикул начинается с буквы Д – для дамской обуви,  М – для мужской, П – для детской. </p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>- сведения о наличии и стоимости обуви артикула X;</p>
<p>- ассортиментный список дамской обуви с указанием наименования и имеющегося в наличии числа пар каждой модели.</p>
</td></tr>
<tr><td>7</td><td>
<p>Сформировать массив на диске, содержащий сведения о наличии билетов на авиарейсы. Класс содержит поля: номер рейса, пункт назначения, время вылета, время прибытия, количество свободных мест в салоне. </p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>- время вылета самолетов в город X;</p>
<p>- наличие свободных мест на рейс в город X с временем отправления Y.</p>
</td></tr>
<tr><td>8</td><td>
<p>Сформировать массив на диске, содержащий сведения о личной коллекции книголюба. Класс содержит поля: шифр книги, автор, название, год издания, местоположение (номер стеллажа).</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>- местоположение книги, автора X названия Y;</p>
<p>- список книг автора Z, находящихся в коллекции;</p>
<p>- число книг издания XX года, имеющихся в библиотеке.</p>
</td></tr>
<tr><td>9</td><td>
Сформировать массив на диске, содержащий сведения о сдаче студентами сессии. Класс содержит поля: индекс группы, фамилия студента, оценки по пяти экзаменам.
Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:
фамилии неуспевающих студентов с указанием индексов групп и количества задолженностей;
средний балл, полученный каждым студентом группы X, и всей группы в целом.
</td></tr>
<tr><td>10</td><td>
<p>Сформировать массив на диске, содержащий сведения об ассортименте игрушек в магазине. Класс содержит поля: название игрушки, цена, количество, возрастные границы (2 - 5).</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>название игрушек, которые подходят детям от 1 до 3 лет;</p>
<p>стоимость самой дорогой игрушки и ее название;</p>
<p>название игрушки, которая по стоимости не превышает X руб. и подходит ребенку в возрасте от A до B лет.</p>
<p>Значения A, B, X вводятся с клавиатуры.</p>
</td></tr>
<tr><td>11</td><td>
<p>Сформировать массив на диске, содержащий сведения о телефонах абонентов. Класс содержит поля: фамилия абонента, место жительства (название улицы, номер дома), год установки телефона.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>номер телефона по вводимой с клавиатуры фамилии абонента;</p>
<p>количество установленных телефонов с XXXX года;</p>
<p>список номеров телефонов, принадлежащих жильцам определенного дома и улицы.</p>
<p>Номер года, название улицы и номер дома вводятся с клавиатуры.</p>
</td></tr>
<tr><td>12</td><td>
<p>Сформировать массив на диске, содержащий сведения о количестве изделий категорий A, B, C, собранных рабочим за месяц. Класс содержит поля: фамилия сборщика, наименование цеха, количество изделий по категориям, собранных рабочим за месяц.</p>
<p>Считая заданными значения расценок SA, SB, SC за выполненную работу по сборке единицы изделия категорий A, B, C, выбрать необходимую информацию с диска и вывести на экран:</p>
<p>общее количество изделий категорий  A, B, C, собранных рабочим цеха;</p>
<p>средний размер заработной платы рабочих цеха X.</p>
</td></tr>
<tr><td>13</td><td>
<p>Сформировать массив на диске, содержащий сведения о количестве изделий, собранных сборщиками цеха за неделю. Класс содержит поля: фамилия сборщика, количество изделий, собранных им ежедневно в течение шестидневной недели, т.е. раздельно в понедельник, вторник и т.д. Написать программу, которая выбирает необходимую информацию с диска и выводит на экран: </p>
<p>фамилию сборщика и общее количество деталей, собранных им за неделю; </p>
<p>фамилию сборщика собравшего наибольшее количество изделий, и день, когда он достиг наивысшей производительности труда.</p>
</td></tr>
<tr><td>14</td><td>
<p>Сформировать массив на диске, содержащий сведения о личной видеоколлекции. Класс содержит поля: шифр по IMDB, название студии, название фильма, год издания, категория, жанр.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран:</p>
<p>- статистика по жанрам для студии Y;</p>
<p>- список фильмов категории Z, находящихся в коллекции;</p>
<p>- число фильмов XX года, имеющихся в коллекции.</p>
</td></tr>
<tr><td>15</td><td>
<p>Сформировать массив на диске, содержащий сведения о клиентах предприятия. Класс содержит поля: фамилия, имя, отчество, дата рождения, число покупок, потраченная сумма.</p>
<p>Написать программу, которая выбирает необходимую информацию с диска и выводит на экран: </p>
<p>- список клиентов у которых на этой неделе день рождения;</p>
<p>- список клиентов у которых покупок более чем на Х;</p>
<p>- средний размер покупки для клиентов пенсионного возраста (старше 60).</p>
</td></tr>
</tbody>
</table>

</body>
</html>
