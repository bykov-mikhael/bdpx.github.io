<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="description" content="C++ классы"/>
<meta name="viewport" content="width=device-width"/>
<link rel="stylesheet" type="text/css" href="/styles.css" />
<title>Лабораторная работа №1</title>
</head>
<body>


<h1>Лабораторная работа №1</h1>
<p><b>Программирование на языке С++ с использованием классов.</b></p>
<p><i><b>Цель работы</b>:</i>
1) изучить возможности программирования классов на языке С++;
2) получить основные навыки программирования манипуляторов ввода/вывода.</p>

<h1>Теоретические сведения</h1>
<p>Класс есть расширение понятия структуры языка С++. Он позволяет создавать типы и
определять функции, которые задают поведение типа. Каждый представитель класса называется объектом.</p>

<h2>Определение класса</h2>

<p>Определение класса идентично определению структуры в С++, за исключением того, что</p>
<ul>
<li><p>оно обычно содержит одну или несколько спецификаций доступа (<i>public</i>,
<i>protected</i>, <i>private</i>);</p></li>
<li><p>вместо ключевого слова struct используется слово <b>class</b>;</p></li>
<li><p>оно обычно включает в себя функции (функции-элементы или методы) наряду с данными-элементами;</p></li>
<li><p>обычно в нем имеются некоторые специальные функции, такие как <i>конструктор</i>
(функция с тем же именем, что и сам класс) и <i>деструктор</i>
(функция, именем которой является имя класса с префиксом - тильдой (~)).</p></li>
</ul>

<p><b>Пример 1.</b>
Определение класса.</p>

<div class="lang-cpp"><![CDATA[class str {
    char *s;//элемент-данное
public://спецификатор открытого доступа
    str(char *word);//функция-элемент: конструктор
    ~str();//функция-элемент: деструктор
    void write();//функция-элемент: метод печати
};]]></div>

<h2>Управление доступом</h2>

<p>В С++ можно ограничить видимость данных и функций класса при помощи меток public, protected, private.
Метка-спецификатор доступа применяется
ко всем элементам класса, следующим за
ней, пока не встретится другая метка
или кончится определение класса.</p>
<p>
Метка-спецификатор
<b>public</b><b>
</b>(открытый)
используется тогда, когда элементы-данные
и функции-элементы класса должны быть
доступны для функций-элементов и других
функций программы, в которой имеется
представитель класса.</p>
<p>
Метка-спецификатор
<b>protected</b><b>
</b>(защищенный)
используется в том случае, когда элементы
данных и функции-элементы должны быть
доступны для функций-элементов данного
класса и классов производных от него.</p>
<p>
Метка-спецификатор
<b>private</b> (закрытый) используется, если элементы-данные и функции-элементы должны быть доступны только для функций-элементов данного класса.</p>

<p>В классе элементы по умолчанию являются закрытыми.</p>
<h3>Элементы класса</h3>
<p>Элементы класса делятся на две основные категории:</p>
<ul>
<li><p>данные, называемые элементами-данными;</p></li>
<li><p>код, называемый элементами-функциями или методами.</p></li>
</ul>

<h2>Данные-элементы</h2>

<p>Данные-элементы классов С++ идентичны элементам структур языка С++ с некоторыми дополнениями:
</p>

<ul>
<li><p>данными-элементами могут быть перечислимые типы, битовые поля или представители ранее объявленного класса.
Также допускается вложенное объявление перечислимого типа данных и создание псевдонимов с помощью typedef;</p></li>
<li><p>данное-элемент класса может быть указателем или ссылкой на представитель этого класса.</p></li>
</ul>

<h2>Элементы-функции</h2>

<p>Функция-элемент является функцией, объявленной (описанной) внутри определения класса.
Тело функции может также определяться внутри определения класса, в этом случае функция называется встроенной (inline) функцией-элементом.
Когда тело функции определяется вне тела класса, перед именем функции ставится префикс из имени класса и операции разрешения видимости (::).
</p>

<p><b>Пример2.</b></p>

<div class="lang-cpp"><![CDATA[
class str {
    char *s;// указатель на строку
public:
    str(char *word) { // встроенный конструктор
        s=new char[strlen(word)+1];
        strcpy(s, word);
    };
    ~str() { // встроенный деструктор
        delete [ ]s;
    };
    void write();// объявление функции-элемента
};

void str::write() { // определение функции-элемента
    cout << s;
};
]]></div>

<h2>Доступ к данным-элементам</h2>

<p>Функции-элементы находятся в области действия класса, в котором они определены.
Т.о. они могут обращаться к любому элементу класса, используя просто имя переменной.
Обычные функции или функции-элементы другого класса могут получить доступ к элементам-данным с помощью операции .
или &gt;,
применяемых к представителю или указателю на представитель класса.</p>

<p><b>Пример 3</b><b>.</b></p>

<div class="lang-cpp"><![CDATA[
class coord {
public:
    int x, y;// координаты x и y
};
void main() {
coord org;// представитель класса координат
coord *orgptr = &org;// указатель на представитель класса
org.x = 0;// задание значения координаты x
orgptr->y = 0;// задание значения координаты y
}]]></div>

<h2>Вызов функций-элементов</h2>

<p>Функции-элементы класса могут вызывать другие функции-элементы того же класса, используя имя функции.
</p>

<p><b>Пример 4.</b>
</p>

<div class="lang-cpp"><![CDATA[
class coord {
    int x, y;// координаты x и y
public:
void setcoord(int _x, int _y)
// функция задания значений координат
{ x =_x; y =_y;
};
void getcoord(int &_x, int &_y)
//функция получения значений координат
{_x = x; _y = y;};
};
void main()
{coord org;// представитель класса координат
coord *orgptr = &org;// указатель на представитель класса
org.setcoord(10, 10);// вызов функции-элемента
// задания значений
int col, row;
orgptr->getcoord(col, row);// вызов функции-элемента
// получения значений координат
}
]]></div>

<p><b>Указатель this</b>
</p>

<p>Каждая нестатическая (не имеющая спецификатора static) функция-элемент имеет доступ к объекту,
для которого вызвана, через ключевое слово this.
Указатель <b>this</b> является указателем на <i>тип_класса*.</i>
</p>

<p><b>Пример</b><b>
</b><b>5</b><b>.</b></p>

<div class="lang-cpp"><![CDATA[
class simple {
public:
    simple();
    void greet() { cout<<“ Hello!”;};
};
simple::simple() {
    greet();// вызов
    this->greet(); // функции
    (*this).greet(); // greet()
}
]]></div>

<p>Т.к. функции-элементы могут обращаться ко
всем элементам класса просто по имени,
в основном указатель this
используется для возвращения указателя
(return this) или ссылки (return *this) на подразумеваемый объект.
</p>

<h2>Конструктор</h2>
<p>
Конструктор
инициализирует представитель класса
(объект) и является функцией-элементом
с тем же именем, что и класс. Конструктор
вызывается компилятором всегда, когда
создается представитель класса. Объект
считается созданным в тот момент, когда
завершил работу конструктор объекта.</p>
<p>
Для
конструкторов выполняются следующие
правила:</p>
<ul>
<li><p>для конструктора не указывается возвращаемый тип;</p></li>
<li><p>конструктор не может возвращать значение;</p></li>
<li><p>конструктор не наследуется;</p></li>
<li><p>для одного класса может существовать один или несколько конструкторов;</p></li>
<li><p>если конструктор не задан явным образом, то автоматически создаётся пустой конструктор.</p></li>
</ul>

<h2>Деструктор</h2>

<p>Деструктор является дополнением конструктора. Он имеет то же имя, что и класс, но с префиксом - тильдой (~). Он вызывается всякий раз,
когда уничтожается представитель класса. Объект считается уничтоженным, когда завершил работу деструктор объекта. Для деструктора существуют
следующие правила:</p>

<ul>
<li><p>деструктор не может иметь аргументов;</p></li>
<li><p>деструктор не может возвращать значения;</p></li>
<li><p>деструктор не наследуется (исключением является виртуальный деструктор);</p></li>
<li><p>для одного класса может существовать только один деструктор;</p></li>
<li><p>если деструктор не задан явным образом, то автоматически создаётся пустой деструктор.</p></li>
</ul>

<p><b>Пример 6</b><b>.</b></p>

<p>file ctime.h</p>

<div class="lang-cpp"><![CDATA[
#ifndef __CTIME_H__
#define __CTIME_H__
class CTime
{char *timestr;
public:
CTime(char *str=”00:00:00”);//конструктор по умолчанию
CTime(const CTime& clk);//копирующий конструктор
~CTime();//деструктор
show();//функция-элемент
};//обязательно ставить точку с запятой, т.к. class –
// объявление типа
#endif
]]></div>

<p>file ctime.cpp</p>

<div class="lang-cpp"><![CDATA[
#include <string.h>
#include <iostream.h>
#include “ctime.h”
CTime:: CTime(char *str=”00:00:00”)
{timestr=new char[strlen(str)+1];
strcpy(timestr,str);
}
CTime:: CTime(const time& clk)
{timestr=new char[strlen(clk.timestr)+1];
strcpy(timestr,clk.timestr);
}
CTime::~ CTime()
{delete [] timestr;
}
CTime::show()
{cout<<”Time is “<<timestr<<endl;
}
]]></div>

<p>file main.cpp</p>

<div class="lang-cpp"><![CDATA[
#include “ctime.h”
int main(void) {
    CTime a;//для а вызывается конструктор по умолчанию
    CTime *b=new CTime;//для b вызывается конструктор по умолчанию
    CTime e(a);//для e вызывается копирующий конструктор
    //вызовем функцию-элемент
    a.show();//00:00:00
    b->show();//00:00:00
    e.show;//00:00:00
}
]]></div>

<p>в конце области видимости автоматически вызываются деструкторы объектов в порядке, обратном вызову конструкторов,
т.е. сначала для <b>е</b>, затем для <b>d</b> и т.д..</p>

<h2>Форматируемый ввод/вывод. Манипуляторы.</h2>

<p>При вводе/выводе данных можно воспользоваться <i>манипуляторами</i>,
то есть специальными функциями форматирования, которые могут находиться в теле оператора ввода/вывода. Если в
манипуляторе используются параметры, то необходимо подключение заголовочного файла <b>&lt;</b><b>iomanip</b><b>.</b><b>h</b><b>&gt;.</b></p>

<p>Для сохранения и восстановления состояния потока используется функция-метод класса потока <b>flags</b><b>().
</b>Например:</p>
<p>
long a;</p>
<p>
a=cout.flags();//для сохранения состояния потока в <b>а</b></p>
<p>
cout.flags(a);//для восстановления состояния потока из <b>а</b></p>

<table>
<tr>
<th>Манипулятор</th>
<th>Назначение</th>
<th>Ввод/вывод</th>
</tr>
<tr>
<td>dec</td>
<td>Вывод числовых данных в десятичной системе счисления.</td>
<td>Вывод</td>
</tr>
<tr>
<td>hex</td>
<td>Вывод числовых данных в шестнадцатеричной системе счисления.</td>
<td>Вывод</td>
</tr>
<tr>
<td>oct</td>
<td>Вывод числовых данных в восьмеричной системе счисления.</td>
<td>Вывод</td>
</tr>
<tr>
<td>endl</td>
<td>Вывод символа новой строки и флэширование.</td>
<td>Вывод</td>
</tr>
<tr>
<td>ends</td>
<td>Вывод нуля (NULL).</td>
<td>Вывод</td>
</tr>
<tr>
<td>flush</td>
<td>Сброс буферизованового вывода на диск.</td>
<td>Вывод</td>
</tr>
<tr>
<td>ws</td>
<td>Пропуск начальных пробелов.</td>
<td>Ввод</td>
</tr>
<tr>
<td>resetiosflags(long f)</td>
<td>Сброс флагов, задаваемых в f.</td>
<td>Ввод/вывод</td>
</tr>
<tr>
<td>setbase(int base)</td>
<td>Устанавливает основание системы счисления для вывода данных.</td>
<td>Вывод</td>
</tr>
<tr>
<td>setfill(char ch)</td>
<td>Устанавливает символ заполнения ch.</td>
<td>Вывод</td>
</tr>
<tr>
<td>setiosflags(long f)</td>
<td>Установка флагов, задаваемых в f.</td>
<td>Вывод</td>
</tr>
<tr>
<td>setprecision(int p)</td>
<td>Задает число символов после десятичной точки, равным p.</td>
<td>Вывод</td>
</tr>
<tr>
<td>setw(int w)</td>
<td>Задает ширину поля, равной w позиций.</td>
<td>Вывод</td>
</tr>
</table>

<h2>Примеры программирования</h2>
<p>
<b>Пример</b><b>
</b><b>7.</b><i><b>
</b></i>Вывод данных с использованием манипуляторов.</p>

<div class="lang-cpp"><![CDATA[
#include <iostream>
#include <iomanip>
#include <cmath>
int main()
{
  double x, y;
  std::cout << "Input x ";
  std::cin &gt;&gt; x;
  y = sin(x);
  std::cout << std::setprecision(3);
  std::cout << std::setw(7) << x;
  std::cout << std::setw(7) << y;
  return 0;
}
]]></div>

<p><b>Пример 8.</b> Описать и определить класс-список.</p>

<p>Файл list.h содержит описание класса.</p>

<div class="lang-cpp"><![CDATA[#pragma once
struct list {
    int inf;// информационное поле
    list *next;// указатель на следующий элемент списка
};
class CSpisok {
    list* head;// указатель на начало списка
public:
    CSpisok (int);
    CSpisok (CSpisok&);
    ~CSpisok();
    void print ();
};
]]></div>

<p>Файл list.cpp содержит определение функций-элементов.</p>

<div class="lang-cpp"><![CDATA[
#include <cstdlib>
#include <iostream>
#include <iomanip>
#include "list.h"
//конструктор инициализирует список из n элементов по принципу "очередь"
CSpisok:: CSpisok(int n) {
    head = NULL;
    list *p,*pn;
    for (int i = 0; i < n; i++) {
        p = new list;
        p->inf = random(100)-50;
        p->next = NULL;
        if (head == NULL) head = p;
        else pn->next = p;
        pn = p;
    }
}
//конструктор копии класса CSpisok
CSpisok:: CSpisok (const CSpisok& s) {
    head = NULL;
    list *sp = s.head, *p, *pn;
    while (sp) {
        p = new list;
        p->inf = sp->inf;
        p->next = NULL;
        if (head == NULL) head = p;
        else pn->next = p;
        pn = p;
        sp = sp->next;
    }
}
//деструктор - уничтожает объект класса список из памяти
CSpisok::~CSpisok() {
    list *p;
    while (head) {
        p = head;
        head = head->next;
        delete p;
    }
}
//функция-элемент печати содержимого списка
void CSpisok::print()
{
    list *p = head;
    while (p) {
        cout << setw(5) << p->inf;
        p = p->next;
    }
    cout << endl;
}
]]></div>

<p>Файл main.cpp содержит основную функцию.</p>

<div class="lang-cpp"><![CDATA[#include <iostream&gt;
#include <iomanip>
#include “list.h”
int main() {
    spisok s1(10), // создание списка из 10 элементов
    s2(s1), // s2- копия списка s1
    s3(15); // создание списка из 15 элементов
    s1.print(); // печать s1
    s2.print(); // печать s2
    s3.print(); // печать s3
}
]]></div>

<p>В проект включены файлы: main.cpp и list.cpp.</p>

<p><i>Результаты выполнения программы:</i></p>

<div class="lang-cpp"><![CDATA[
-49  -50 -17 -47 -15 -29  3 -31 20 44
-49  -50 -17 -47 -15 -29  3 -31 20 44
-23  -6 -40 19  6 -46 -34 31 18 26 32 45 -29 -8 45
]]></div>

<h2>Контрольные вопросы</h2>
<ol>
<li>Что представляет собой класс?</li>
<li>Какие спецификации доступа используются при описании класса?</li>
<li>Что является элементами класса?</li>
<li>Как осуществляется доступ к элементам
класса?</li>
<li>Для чего используется указатель this?</li>
<li>Что такое конструктор?</li>
<li>Что такое деструктор?</li>
</ol>

<h2>Варианты заданий</h2>
<ol>
<li>
Определить
класс-строку. В класс включить два
конструктора: для определения класса
строки строкой символов и путем
копирования другой строки (объекта
класса строки). Предусмотреть функции
поиска слова в строке и добавления
другой строки, начиная с позиции N</li>
<li>
Определить
класс-строку. В класс включить два
конструктора: для определения класса
строки строкой символов и путем
копирования другой строки (объекта
класса строки). Предусмотреть функции
слияния двух строк и функцию подсчёта
предложений в строке.</li>
<li>
Определить
класс-строку. В класс включить два
конструктора: для определения класса
строки строкой символов и путем
копирования другой строки (объекта
класса строки). Предусмотреть функции
сортировки слов в строке по-алфавиту
и подсчёта количества слов.</li>
<li>
Определить
класс список элементов. В определение
класса включить два конструктора: для
определения списка по его размеру и
путем копирования другого списка.
Предусмотреть функции подсчёта
количества элементов списка и добавления
одного списка в другой список, начиная
с позиции N.</li>
<li>
Определить
класс список элементов. В определение
класса включить два конструктора для
определения списка по его размеру и
путем копирования другого списка.
Предусмотреть функции сортировки
списка по возрастанию и вывода на
экран в обратном порядке.</li>
<li>
Определить
класс список элементов. В определение
класса включить два конструктора для
определения списка по его размеру и
путем копирования другого списка.
Предусмотреть функции инверсии списка
(123-&gt;321)
и поиска подсписка в списке.</li>
<li>
Определить
класс сортированный список элементов.
В определение класса включить два
конструктора для определения списка
по его размеру и путем копирования
другого списка. Предусмотреть функции
добавления элемента и слияния двух
сортированных списков.</li>
<li>
Определить
класс список элементов. В определение
класса включить два конструктора для
определения списка по его размеру и
путем копирования другого списка.
Предусмотреть функции формирования
нового списка из элементов, входящих
только в один из двух других списков
и вычисления суммы элементов списков.</li>
<li>
Определить
класс квадратная матрицу. В класс
включить два конструктора для
определения матрицы по количеству
элементов и путем копирования другой
матрицы. Предусмотреть функции
вычисления детерминанта матрицы и
умножения матрицы на число.</li>
<li>
Определить
класс стек. В класс включить два
конструктора для определения стека
по его размеру и путем копирования
другого стека. Предусмотреть функции
вычисления среднего арифметического
из элементов стека и нахождения
элемента по его номеру</li>
<li>
Определить
класс вектор. В класс включить два
конструктора для определения вектора
по его размеру и путем копирования
другого вектора. При задании вектора
по его размеру предусмотреть его
заполнение случайными числами.
Предусмотреть функции умножения
векторов и подсчёта суммы элементов
вектора.</li>
<li>
Определить
класс вектор. В класс включить два
конструктора для определения вектора
по его размеру и путем копирования
другого вектора. При задании вектора
по его размеру предусмотреть его
заполнение случайными числами.
Предусмотреть функции нахождения
максимального и минимального из
элементов вектора и умножения вектора
на число.</li>
<li>Определить класс вектор.
В класс включить два конструктора для определения вектора по его размеру и путем копирования другого вектора.
При задании вектора по его размеру предусмотреть его заполнение случайными числами.
Предусмотреть функции сортировки вектора по возрастанию и нахождения среднего арифметического из элементов вектора.</li>
<li>Определить класс прямоугольная матрицу.
В класс включить два конструктора для определения матрицы по количеству элементов и путем копирования другой матрицы.
Предусмотреть функции вычисления произведения матрицы на матрицу и сложения матриц.</li>
<li>Определить класс «вектор координат в пространстве».
В класс включить два конструктора для определения вектора по умолчанию и путем копирования другого вектора.
При задании вектора по умолчанию предусмотреть его заполнение случайными числами.
Предусмотреть функции нахождения длины вектора, умножения вектора на вектор, скалярного произведения векторов.</li>
</ol>

</body>
</html>
