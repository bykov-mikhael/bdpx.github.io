<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="description" content="C++ виртуальные функции"/>
<meta name="viewport" content="width=device-width"/>
<link rel="stylesheet" type="text/css" href="/styles.css"/>
<title>Лабораторная работа №2</title>
</head>
<body>

<h1>Лабораторная работа №2: Программирование с использованием наследования классов и виртуальных функций</h1>

<p>Цель работы: 1) изучить возможности наследования классов на языке С++; 2) получить основные навыки программирования с использованием наследования классов.
Теоретические сведения
</p>

<p>Язык С++ позволяет классу наследовать данные-элементы и функции-элементы одного или нескольких других классов.
Новый класс называют производным классом.
Класс, элементы которого наследуются производным классом, называется базовым классом.
В свою очередь производный класс может служить базовым для другого класса.
Наследование дает возможность заключить некоторое общее или схожее поведение различных объектов в одном базовом классе.
</p>

<p>Наследование позволяет также изменить поведение существующего класса.
Производный класс может переопределить некоторые функции-элементы базового, наследуя, тем не менее, основной объем свойств и атрибутов базового класса.
Общий вид наследования:
</p>

<div class="lang-cpp"><![CDATA[
class Base {
    // ...
};
class Derived: <ключ доступа> Base {
    // .....
};
]]></div>

<p>Ключ доступа может быть private, protected, public. Если ключ не указан, то по умолчанию он принимается private.
Наследование позволяет рассматривать целые иерархии классов и работать со всеми элементами одинаково, приводя их к базовому. Правила приведения следующие:
Наследуемый класс всегда можно привести к базовому;
</p>

<p>Базовый класс можно привести к наследуемому только если в действительности это объект наследуемого класса.
Ошибки приведения базового класса к наследуемому отслеживаются программистом.
</p>

<h2>Доступ к элементам класса</h2>

<p>При наследовании ключ доступа определяет уровень доступа к элементам базового класса внутри производного класса.
В таблице описаны возможные варианты доступа.
</p>

<table>
<tr>
<th>Наследование</th>
<th>Доступ в базовом классе</th>
<th>Доступ в производном классе</th>
</tr>
<tr>
<td>public</td>
<td>public protected private</td>
<td>public protected private</td>
</tr>
<tr>
<td>protected</td>
<td>public protected private</td>
<td>protected protected private</td>
</tr>
<tr>
<td>private</td>
<td>public protected private</td>
<td>private private private</td>
</tr>
</table>

<h2>Конструкторы и деструкторы при наследовании</h2>

<p>Конструкторы не наследуются. Если конструктор базового класса требует спецификации одного или нескольких параметров, конструктор производного класса должен вызывать базовый конструктор, используя список инициализации элементов.
Пример 1. </p>

<div class="lang-cpp"><![CDATA[
#include <string>
class Base {
public:
    Base(int, float);
};
class Derived: Base
{    public:
    Derived(char* lst, float amt);
};
Derived::Derived(char* lst, float amt) : Base(strlen(lst),amt)
{ }
]]></div>

<p>В деструкторе производного класса компилятор автоматически генерирует вызовы базовых деструкторов,
поэтому для удаления объекта производного класса следует сделать деструктор в базовых классах виртуальным.
Для вызова используется delete this либо operator delete.
</p>

<h2>Виртуальные функции</h2>

<p>Функция-элемент может быть объявлена как virtual. Ключевое слово virtual предписывает компилятору генерировать некоторую дополнительную информацию о функции.
Если функция переопределяется в производном классе и вызывается с указателем (или ссылкой) базового класса, ссылающимся на представитель производного класса,
эта информация позволяет определить, какой из вариантов функции должен быть выбран: такой вызов будет адресован функции производного класса.
</p>

<p>Для виртуальных функций существуют следующие правила:
виртуальную функцию нельзя объявлять как static.
спецификатор virtual необязателен при переопределении функции в производном классе.
виртуальная функция должна быть определена в базовом классе и может быть переопределена в производном.
</p>

<p>Пример программирования
Пример 2. Написать программу с наследованием класса стек от класса массив.
</p>

<div class="lang-cpp"><![CDATA[
#include <iostream>
#include <cstdlib>
class massiv {
    int *num;
    int kol;
    public:
    massiv(int n);
    void print();
    virtual int kolich() { return kol; }
    void put(int k,int n) { num[k]=n; }
    ~massiv() { delete[] num; }
};
massiv::massiv(int n) {
    num = new int[n];
    kol  =n;
    for (int i=0; i < kol; i++)
        num[i] = random(100) - 50;
}
void massiv::print() {
    for (int i = 0; i < kolich(); i++)
        cout << num[i] << " ";
    cout << endl;
}
class stec : public massiv {
    int top;
public:
    stec(int);
    virtual int kolich() {return top;}
    void pop(int k);
};
stec::stec(int n):massiv(n) {
    top=0;
}
void stec::pop(int k) {
    put(top++,k);
}
int main() {
    randomize();
    massiv a(10);
    a.print();
    stec b(10);
    b.pop(random(100)-50);
    b.pop(random(100)-50);
    b.pop(random(100)-50);
    b.print();
}
]]></div>

<p>Главное отличие виртуальной функции от просто перегруженной в том, какая функция будет вызываться при рассмотрении производного класса как базового.
Пример 3.</p>

<div class="lang-cpp"><![CDATA[
#include <iostream>
class Base {
public:
    Base() {}
    Print(){   cout << ”I’m a Base print” << endl;}
    virtual View(){ cout << ”I’m a Base view” << endl;}
};
class Derived: public Base {
public:
    Derived(){};
    Print(){   cout << ”I’m a Derived print” << endl;}
    View(){ cout << ”I’m a Derived view” << endl;}
};
void main(void) {
    Base *A=new Base;
    Derived *B=new Derived;
    Base *C;
    A->Print();
    A->View();
    B->Print();
    B->View();
    C=(Base *)B;
    C->Print();
    C->View();
}
]]></div>

<p>Результат:
“I’m a Base print”
“I’m a Base view”
“I’m a Derived print”
“I’m a Derived view”
“I’m a Base print”
“I’m a Derived view”
</p>

<p>Таким образом, мы видим, что виртуальные функции позволяют нам всегда работать с теми функциями, которые специфичны именно для используемого класса, даже когда мы рассматриваем его как базовый.
</p>

<h2>Контрольные вопросы</h2>

<ol>
<li>Какой класс называется базовым?</li>
<li>Какой класс называется производным?</li>
<li>Какие ключи доступа используются при наследовании?</li>
<li>Наследуются ли конструкторы?</li>
<li>Наследуются ли деструкторы?</li>
<li>Что собой представляет виртуальная функция?</li>
<li>Можно ли виртуальную функцию объявить как static?</li>
</ol>

<h2>Варианты заданий</h2>
<ol>
<li>Разработать программу с использованием наследования классов, реализующую классы: графический объект; круг; квадрат.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран его размер и координаты.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
железнодорожный вагон;
вагон для перевозки автомобилей;
цистерна.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран его вес и количество единиц товара в вагоне.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
массив;
стек;
очередь.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран количество элементов и добавьте элемент.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
воин;
пехотинец(винтовка);
матрос(кортик).
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран его возраст и вид оружия.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
точка;
линия;
круг.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран координаты и размер.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
работник больницы;
медсестра;
хирург.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран возраст и название должности.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
точка;
квадрат
пирамида.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран его размер и координаты.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
реагент;
углерод;
железо.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран его количество и свойства (форма кристаллической решетки для углерода и чистота выработки руды для железа).
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
работник фирмы;
стажер;
руководящий сотрудник;
директор.
Используя виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран целое число - уровень допуска, и название должности.
</li>
<li>
Разработать программу с использованием наследования классов, реализующую классы:
молодой человек;
студент;
военнослужащий;
военный курсант.
Используя виртуальное наследование и виртуальные функции, не зная с объектом какого класса вы работаете, выведите на экран сведения о военнообязанности.
</li>
</ol>

</body>
</html>
