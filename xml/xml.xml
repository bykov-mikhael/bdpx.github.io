<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="description" content="язык разметки данных XML"/>
<meta name="viewport" content="width=device-width"/>
<link rel="stylesheet" href="/styles.css" type="text/css"/>
<title>Введение в XML</title>
</head>
<body>

<h1>Введение в XML</h1>

<p>Цель лабораторной работы:</p>
<ol>
<li>Познакомиться с языком разметки данных XML.</li>
<li>Изучить правила построения HTML документов</li>
</ol>

<h2>Теоретические сведения</h2>

<h3>Предназначение XML</h3>

<p>Различные виды представления информации: текст, графика (растровая и векторная), базы данных, звук, музыка (нотная запись), языки разметки.
Каждый из видов представления имеет далеко не один различный формат представления данных.
</p>

<p>Цель: стандартизировать формат представления данных, чтобы возможно было обеспечить:</p>
<ul>
<li>Похожий синтаксис</li>
<li>Одинаковые методы обработки</li>
<li>Общепринятость</li>
<li>Применимость во всех предметных областях</li>
<li>Открытость</li>
</ul>

<p>Язык разметки данных eXtensible Markup Language - Расширяемый язык разметки XML
</p>

<h3>Устройство XML документа</h3>

<p>Синтаксически в XML, по сравнению с HTML, нет ничего нового. Это такой же текст, размеченный тегами, но
с той лишь разницей, что в HTML существует ограниченный набор тегов, которые можно использовать в документах, в то время, как XML позволяет создавать и
использовать любую разметку, которая может понадобиться для разметки данных.</p>

<p>Несомненным достоинством XML является и то, что это достаточно простой язык.
Основных конструкций в XML мало, но, несмотря на это, с их помощью можно создавать разметку документов практически любой сложности.</p>

<p>Для демонстрации структуры XML документа лучше обратиться к какому нибуть примеру. Рассмотрим следующий XML документ:</p>

<div class="lang-xml"><![CDATA[
<?xml version="1.0" ?>
<root_element>
  <element>
    Текст
    <another_element attribute="значение" />
    текст ...
    </element>
      Текст текст текст
    <element>
      текст текст...
  </element>
  ...
</root_element>
]]></div>

<p>Рассмотрим данный пример подробно.
Первая строка документа определяет его как XML документ, построенный в соответствии с первой версией языка (<b>version</b>=&quot;1.0&quot;).
В этой же конструкции можно указать и кодировку, в которой создан документ:</p>

<div class="lang-xml"><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
]]></div>

<p>Кодировкой по умолчанию для XML является <b>unicode</b>.
Далее находится открывающий тег корневого (главного) элемента &lt;<b>root_element</b>&gt;, содержащий элемент &lt;<b>элемент</b>&gt;,
который, в свою очередь, содержит элемент &lt;<b>another_element атрибут</b>=&quot;значение&quot; /&gt; с атрибутом <b>атрибут</b>.
Как видно из примера, правила записи элементов, атрибутов и их значений в XML ничем не отличаются от правил записи
элементов атрибутов и их значений в HTML (также есть открывающие и закрывающие теги элементов, элементы с содержимым и без и т.д.),
только набор элементов несколько расширен, благодаря чему мы и можем <q>нагрузить</q> разметку семантикой.</p>

<p>Ниже приводятся несколько правил построения XML документа. Итак:</p>

<ul>
    <li>любой XML документ должен начинаться строкой &lt;?<b>xml version</b>=&quot;1.0&quot; ?&gt;</li>
    <li>любой XML документ должен иметь единственный (не более, не менее!) корневой элемент; например, в
      HTML для этих целей использовался элемент <b>&lt;html&gt;</b>, в примере выше - это &lt;<b>root_element</b>&gt;.</li>
    <li>кодировкой по умолчанию для символов XML документа является <b>Unicode</b> кодировка <b>UTF-8</b>,
      поэтому XML файлы должны быть сохранены в соответствующей кодировкой или в
      1-й строке документа должна быть задана кодировка документа, например <b>encoding</b>=&quot;Windows-1251&quot;
      (при работе только с латиницей это никак себя не проявляет, так как кодировка этих символов в <b>ASCII</b> совпадает с <b>UTF-8</b>).</li>
    <li>правила записи большинства конструкций языка совпадает с правилами <b>XHTML</b>, изучавшемся вами ранее
     (более подробно речь об основных конструкциях языка пойдет далее в уроке).</li>
</ul>

<p>XML документ представляет
    собой обыкновенный текстовый файл с расширением <b>.xml</b>. Единственная
    особенность их заключается в том, что для символов файла рекомендуется использовать
    кодировку <b>Unicode</b>.</p>

<h2>Основные конструкции XML</h2>
<p>Помимо элементов, атрибутов и текста, документы могут содержать и другие конструкции,
такие как комментарии, инструкции по обработке и секции символьных данных.
Эти базовые составляющие используются для того, чтобы чтобы гибко, но в четком соответствии со стандартами,
размечать документы любой сложности. Рассмотрим эти конструкции поподробнее.</p>

<h3>Элемент</h3>

<p>Теги в XML документе не просто размечают текст - они выделяют объект, называемый <i>элементом</i>.
    Элементы являются основными структурными единицами XML - именно они
    иерархически организуют информацию, содержащуюся в документе. Элементы могут
    быть пустыми, т.е. не содержать ни данных, ни других конструкций, или непустыми
    - включать в себя текст, другие элементы и т. п.</p>
  <p>Пустой элемент имеет следующий вид:</p>

<div class="lang-xml"><![CDATA[
<element attribute="значение" attribute="значение" ... />
]]></div>

<p>Примерами таких элементов в знакомом HTML являются:</p>

<div class="lang-xml"><![CDATA[
<br />, <img src="images/picture.gif" /> ...
]]></div>

<p>Непустые элементы имеют вид:</p>

<div class="lang-xml"><![CDATA[
<element attribute="значение" attribute="значение" ...>
       ...
       Содержимое элемента
       ...
</element>
]]></div>

<p>В HTML таких элементов большинство: <b>&lt;body&gt;</b> ... <b>&lt;/body&gt;</b>, <b>&lt;p&gt;</b> ... <b>&lt;/p&gt;</b> - в этих элементах может располагаться как текст, так и
    другие элементы (таблицы, рисунки...).</p>
  <p>Необходимо помнить об обной <b>очень</b> важной особенности XML: имена в XML - регистро-зависимы, то
    есть <b>&lt;Sample-element /&gt;</b>, <b>&lt;SAMPLE-ELEMENT /&gt;</b> и <b>&lt;sample-element
    /&gt;</b> - совершенно разные элементы.</p>
<p>Легко заметить, что документ, состоящий из вложенных друг в друга элементов, подобен дереву:
родительский элемент является <b>корнем</b>, дочерние элементы - <b>ветками</b>,
а если они не содержат ничего более - <b>листьями</b>:</p>

<div class="lang-xml"><![CDATA[
<library>
    <book>
         <title value="Технология XSLT" />
         <author fio="Алексей Валиков" />
         <publisher>
             <name value="BHV" />
             <homepage url="http://www.bhv.com" />
         </publisher>
    </book>
    ...
</library>
]]></div>

<p>В данном случае &lt;<b>library</b>&gt; является корнем, &lt;<b>book</b>&gt; и &lt;<b>/publisher</b>&gt; - ветви, а
    &lt;<b>title</b>&gt;, &lt;<b>author</b>&gt;, &lt;<b>name</b>&gt; и &lt;<b>homepage</b>&gt; - листья
</p>

<p><b>Внимание:</b> в XML требуется тщательно следить
    за правильностью вложения элементов друг в друга - элементы, раньше открытые,
    должны быть позже закрыты. В противном случае не может быть и речи о
    иерархической структуре документа.</p>

<h3>Атрибут</h3>

<p>В элементах можно использовать <dfn>атрибуты</dfn> с присвоенными им значениями. Атрибут задается следующим образом:</p>

<pre><b>атрибут</b> = &quot;значение&quot;</pre>

<p>В отличие от HTML <b>в XML атрибуты всегда должны иметь значение!</b> Значение атрибута заключается в
двойные или одинарные кавычки. При необходимости, можно использовать одинарные кавычки внутри двойных и наоборот.</p>

<div class="lang-xml"><![CDATA[
    <company_name = 'Акционерное Общество "Витязь"' ... />
    ...
    <book-author = "О'Генри" ... />
]]></div>

<p>Имена в XML регистро-зависимые. Это относится не только к элементам, но и к атрибутам.</p>

<h3>Символьные данные: секция CDATA</h3>

<p>Секция <dfn>CDATA</dfn> выделяет часть документа, внутри которых текст не должен восприниматься как
разметка. CDATA означает буквально <q>character data</q> - символьные данные. Вот пример секции CDATA:</p>

<div class="lang-xml">
    &lt;![CDATA[
            содержимое
    ]]&gt;
</div>

<p>Внутри секции <b>CDATA</b> могут располагаться любые символы, даже &lt; и &amp; - они не будут
    восприниматься анализатором как управляющие. Единственная последовательность,
    которая не должна присутствовать в <b>CDATA</b>, это <q><b>]]&gt;</b></q> - окончание символьных данных.</p>

<h3>Комментарии</h3>

<p>XML документ может содержать комментарии, записываемые следующим образом:</p>

<div class="lang-xml"><![CDATA[
<!-- Это комментарий -->
...
<!--
    комментарии
    могут охватывать
    несколько строк
-->
]]></div>

<p>Текст комментария может состоять из любых символов, кроме двух <q>-</q> подряд (<q>--</q>).</p>

<h3>Пространства имен</h3>

<p>Проблема <q>одинаковых</q> тегов.
На примере ниже две предметные области - фрукты и компьютеры используют один тег &lt;apple&gt;
Мы не можем объединить эти данные в одной модели.
</p>

<div class="lang-xml"><![CDATA[<?xml version="1.0" ?>
<fruit>
    <apple>Снежный кальвиль</apple>
</fruit>

<?xml version="1.0" ?>
<computer>
    <apple>MacBook</apple>
</computer>
]]></div>

<p>Пространства имен используются для разделения или идентификации данных.
В XML они используются для связи одного или более узлов с определенным URI (унифицированный идентификатор ресурса).
</p>

<p>Определение пространства имен.
1 способ - это определить атрибут, названный xmlns, внутри узла элемента со значением URI. Этот узел и все его потомки будут принадлежать пространству имен, установленному этим URI.
</p>

<div class="lang-xml"><![CDATA[<?xml version="1.0" ?>
<myxml>
  <parent xmlns="http://www.example.com/uri/">
      <child/>
  </parent>
</myxml>
]]></div>

<p>2 способ - Пространство имен URI так же может быть связано с префиксом в XML. При определении с префиксом, только узлы, использующие этот префикс, будут рассматриваться как часть пространства имен. И узлы, и атрибуты элемента могут использовать префикс. Чтобы определить префикс, нужно создать узел xmlns в родительском элементе с именем префикса в качестве суффикса атрибута xmlns .
</p>

<div class="lang-xml"><![CDATA[<?xml version="1.0" ?>
<myxml xmlns:ns="http://www.example.com/uri/" >
  <parent>
      <ns:child/>
  </parent>
</myxml>]]></div>

<p>В данном примере только &lt;child&gt; находится в пространстве имен
</p>

<p>URI обычно являются адресами веб-сайтов. Они не обязательно должны быть верными адресами, но так как только одно тело может обладать любым одним доменом, они делают хорошее дело, позволяя убедиться, что люди не будут использовать один и тот же URI для разных целей. Это известно в качестве установки пространства имен по умолчанию 
</p>

<p>Пространства имен: Определенные пользователем и Общепринятые
</p>

<p>XML документ считается формально корректным (<dfn>well-formed</dfn>), если он соответствует всем общим правилам синтаксиса XML, применимым к любому XML-документу:
правильная структура документа, совпадение имен в начальном и конечном теге элемента и т.п.
Документ, который неправильно построен, не может считаться документом XML.
Документ должен соответствовать синтаксическим правилам, определенным консорциумом W3C (World Wide Web Consortium)
в спецификации <a href="https://www.w3.org/TR/xml/">Extensible Markup Language (XML) 1.0 (Fifth Edition)</a>.
</p>

<p>Далее XML документ считается действительным (<dfn>valid</dfn>), если включает определение типа документа (document type definition, DTD) или XML-схему (XSD),
причем сам документ не противоречит этой схеме (определению DTD). Определение DTD (схема документа) задает корректный синтаксис.
</p>

<h2>Задание на лабораторную работу</h2>

<p>Создать XML документ, содержащий информацию о какой-либо предметной области.
Название предметной области согласовать с преподавателем.
Для оформления XML документа использовать знания и пользоваться правилами, указаными в теоретических сведениях.
Проверить документ на корректность.</p>

<p>Проверить корректность my.xml можно командой</p>

<pre>xmllint my.xml</pre>

</body>
</html>
